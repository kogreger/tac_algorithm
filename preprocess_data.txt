Pre-process Data for TaC-Algorithm
----------------------------------

1. Study area
	1.1 Download study area outline from OSM, e.g. using osm2pgsql:
		osm2pgsql --create --hstore-all --hstore-add-index --multi-geometry --prefix table_prefix --verbose --unlogged --number-processes 4 --database osm --username postgres --password --host 123.456.789.123 --style ./default.style ./studyarea-latest.osm.bz2
	1.2 Import study area outline into database, e.g. using DB Manager in QGIS:
		SELECT osm_id, tags -> 'name' AS osm_name, way_area AS osm_area, ST_Transform(way, 4326) AS the_geom 
		FROM public.osm_bs_polygon 
		WHERE (tags -> 'admin_level') = '6' AND 
			(tags -> 'name') = 'Braunschweig' AND 
			ST_GeometryType(way) IN ('ST_Polygon', 'ST_MultiPolygon')
	1.3 Manually check for islands and exclaves

2. Road network
	2.1 Download road network data from OSM, e.g. using osm2pgsql (see above))
	2.2 Classify road network incl. study area outline, crop by outline, reproject and import into database (cf. osm_road_classes.txt)
	2.3 Crop road network to study area outline:
		DELETE FROM temp.braunschweig_roads r 
		WHERE NOT(r.gid IN (
			SELECT r2.gid 
			FROM temp.braunschweig_roads r2, temp.braunschweig_outline o 
			WHERE ST_Intersects(r2.the_geom, o.the_geom)
		))
	2.4 Clean topology of classified road network (can also be done in PostGIS >2.0)
		2.4.1 v.in.ogr.qgis
		2.4.2 v.clean.break)
		2.4.3 delete and re-import to database

3. Generate cells from OSM road network data
	3.1 Polygonize road network (can also be done in PostGIS >2.0)
		3.1.1 QGIS > Processing > Toolbox > Polygonize
		3.1.2 Import cells from SHP file into database
	3.2 clip to study area
		DELETE FROM temp.hamburg_cells c 
		USING temp.hamburg_outline o 
		WHERE ST_Disjoint(ST_PointOnSurface(c.the_geom), o.the_geom);
	3.3 derive distance and relationship between neighboring cells
		CREATE UNLOGGED TABLE temp.hamburg_relationships AS
		SELECT c1.gid a, c2.gid b, 
			ST_Distance_Sphere(ST_PointOnSurface(c1.the_geom), ST_PointOnSurface(c2.the_geom)) dst, 
			MAX(r.tac_class)::integer obst 
		FROM temp.hamburg_cells c1, temp.hamburg_cells c2, temp.hamburg_roads r 
		WHERE c1.gid != c2.gid AND 
			(ST_Covers(c1.the_geom, r.the_geom) AND 
			ST_Covers(c2.the_geom, r.the_geom)) 
		GROUP BY c1.gid, c2.gid 
		ORDER BY c1.gid, c2.gid;

4. Seeds
	4.1 Import seeds
	4.2 Check for multiple seeds per cell
		4.2.1 QGIS > Vector > Analysis Tools > Points in polygon
		4.2.2 Symbolize resulting SHP file using check_seed_conflict.qml
		4.2.3 Manually delete unnecessary seeds (should be merge)